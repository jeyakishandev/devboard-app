# docker-compose.dev.yml
services:
  db:
    image: postgres:16-alpine
    container_name: devboard-db
    environment:
      POSTGRES_DB: devboard
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - dbdata:/var/lib/postgresql/data
    # Expose si tu veux accéder à Postgres depuis l'hôte :
    # ports:
    #   - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U postgres -d devboard"]
      interval: 3s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  api:
    build:
      context: ./backend
    container_name: devboard-api
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: devboard
      DB_USER: postgres
      DB_PASS: postgres
      JWT_SECRET: devboard-secret
      JWT_EXPIRES_IN: 7d
      CHOKIDAR_USEPOLLING: "1"
      FRONTEND_ORIGIN: "http://localhost:5173,http://172.18.0.4:5173"
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules          # évite d’écraser les deps du conteneur
      - ./backend/uploads:/app/uploads  # (si tu utilises l’upload local)
    command: sh -lc "npm ci && npm run dev"
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', r => process.exit(r.statusCode===200?0:1)).on('error', () => process.exit(1))"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s
  web:
    build:
      context: ./frontend
    container_name: devboard-web
    depends_on:
      api:
        condition: service_healthy
    environment:
      VITE_API_URL: http://localhost:3000
      CHOKIDAR_USEPOLLING: "1"
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: sh -lc "npm ci && npm run dev -- --host 0.0.0.0 --port 5173"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "node -e \"fetch('http://localhost:5173/').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))\""
        ]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

volumes:
  dbdata:
